
SKETCH_BASENAME=pen_apps
SKETCH_DIR=$(SKETCH_BASENAME)
SKETCH_INO_FILE=$(SKETCH_DIR)/$(SKETCH_BASENAME).ino

# SRCDIR and PROJECTROOT are already set by the main Makefile
SCRIPTS_DIR=$(PROJECTROOT)/scripts
HGK_ASYNC_PP=$(SCRIPTS_DIR)/hgk-async-pp.pl

ASYNCFILES_GEN_LZZ_DIR=hgkasync-lzz-out

ifeq ($(LZZ),)
	LZZ=lzz
endif

ifeq ($(strip $(LZZFILES)),)
	LZZFILES := $(wildcard $(SRCDIR)/*.lzz)
endif

ifeq ($(strip $(ASYNCFILES)),)
	ASYNCFILES := $(wildcard $(SRCDIR)/*.lzz.hgkasync)
endif



# Our recipe for converting .lzz -> .cpp .h.
# The output directory is the first order-only prerequisite.
LZZ_RECIPE=$(LZZ) $(LZZFLAGS) -o $| $<


LZZFILES_CPP_SKETCH_FILES := $(LZZFILES:$(SRCDIR)/%.lzz=$(SKETCH_DIR)/%.cpp)
LZZFILES_H_SKETCH_FILES := $(LZZFILES:$(SRCDIR)/%.lzz=$(SKETCH_DIR)/%.h)

LZZFILES_SKETCH_FILES := $(LZZFILES_CPP_SKETCH_FILES) $(LZZFILES_H_SKETCH_FILES)

# .lzz files generated by the async preprocessor
ASYNCFILES_GEN_LZZ := $(ASYNCFILES:$(SRCDIR)/%.lzz.hgkasync=$(ASYNCFILES_GEN_LZZ_DIR)/%.lzz)

ASYNCFILES_CPP_SKETCH_FILES := $(ASYNCFILES_GEN_LZZ:$(ASYNCFILES_GEN_LZZ_DIR)/%.lzz=$(SKETCH_DIR)/%.cpp)
ASYNCFILES_H_SKETCH_FILES := $(ASYNCFILES_GEN_LZZ:$(ASYNCFILES_GEN_LZZ_DIR)/%.lzz=$(SKETCH_DIR)/%.h)

ASYNCFILES_SKETCH_FILES := $(ASYNCFILES_CPP_SKETCH_FILES) $(ASYNCFILES_H_SKETCH_FILES)

SKETCH_FILES := $(SKETCH_INO_FILE) $(LZZFILES_SKETCH_FILES) $(ASYNCFILES_SKETCH_FILES)

ifeq ($(PRJLZZFLAGS),)
	# -i       Output inline definitions to inline file.
	# -c       Create source file if header file is created.
	# -hl      Output #lines in header file.
	# -sl      Output #lines in source file.
	# -il      Output #lines in inline file.
	# -tl      Output #lines in template file.
	# -nl      Output #lines in template inline file.
	# -hd      Write header file only if different than previous.
	# -d       Delete old files no longer created.
	PRJLZZFLAGS=-c -hl -sl -tl -nl -hd -d
endif

# -x       Use absolute filenames in #lines.
# -o DIR   Set output directory for files.
LZZFLAGS=$(PRJLZZFLAGS) -x $(DEFFLAGS)


# Targets that don't produce their name as a file
.PHONY: main sketch show-vars

# Prevent auto-delete of intermediates
.SECONDARY: $(ASYNCFILES_GEN_LZZ) $(SKETCH_FILES)

main: sketch

show-vars:
	@echo SKETCH_FILES=$(SKETCH_FILES)

sketch: $(SKETCH_FILES)

$(ASYNCFILES_GEN_LZZ_DIR) $(SKETCH_DIR):
	mkdir -p $@

$(SKETCH_INO_FILE): | $(SKETCH_DIR)
	@# Arduino compile seems not to work if setup() and loop() are not
	@# actually defined in the .ino file. Put the behavior in inline void
	@# sketchSetup() and inline void sketchLoop() in SketchMain.lzz.
	echo '#include "SketchMain.h"' > $@
	echo 'void setup() { sketchSetup(); }' >> $@
	echo 'void loop() { sketchLoop(); }' >> $@


$(ASYNCFILES_GEN_LZZ_DIR)/%.lzz: %.lzz.hgkasync | $(ASYNCFILES_GEN_LZZ_DIR)
	$(HGK_ASYNC_PP) $< > $@

.SECONDEXPANSION:

get_src_lzz_name = $(addsuffix .lzz, $(addprefix $(SRCDIR)/, $(basename $(notdir $(1)))))
get_gen_lzz_name = $(addsuffix .lzz, $(addprefix $(ASYNCFILES_GEN_LZZ_DIR)/, $(basename $(notdir $(1)))))

$(LZZFILES_CPP_SKETCH_FILES) : $$(call get_src_lzz_name,$$@) | $(SKETCH_DIR)
	$(LZZ_RECIPE)

$(ASYNCFILES_CPP_SKETCH_FILES) : $$(call get_gen_lzz_name,$$@) | $(SKETCH_DIR)
	$(LZZ_RECIPE)

# The .h files are generated by the rule that generates the .cpp files, so
# we set this pseudo-dependency.
$(LZZFILES_H_SKETCH_FILES) $(ASYNCFILES_H_SKETCH_FILES) : $$(basename $$@).cpp


